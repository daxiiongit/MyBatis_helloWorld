<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace:此时只是对sql进行分类管理，隔离sql的作用 -->

<!--
    id:标识映射文件的id；将sql语句封装为mappedStatement对象，所以称id为statement的id；
    parameterType:输入参数的类型，int：基本类型，如果前端传入的参数不是int类型，就会报错；Integer：封装类型，可以传入其他类型的参数；
    resultType:输出结果集类型，指定sql输出结果映射的java对象；
    #{id}:占位符，里面包装了一个参数，接受输入的参数。简单类型的参数，参数名可以任意。
-->
<mapper namespace="test">

    <!-- 根据id 来查找用户信息 -->
    <select id="findUserById" parameterType="int" resultType="com.sunyanxiong.mybatis.User">
        SELECT * FROM user WHERE id = #{id};
    </select>

    <!-- 根据用户名来查找用户信息
        parameterType:模糊查询出来的数据可能是多条，输入类型是、string类型的数据
        resultType:输出单条结果集会映射为java对象。
        ${value}:接受参数的内容，如果是简单类型，里面只能写value,
        %${value}%:这样写会导致sql注入
    -->
    <select id="findUserByName" parameterType="String" resultType="com.sunyanxiong.mybatis.User">
        SELECT * FROM user WHERE username LIKE '%${value}%'
    </select>

    <!-- 添加用户信息
        添加用户信息的时候，是将pojo 对象的值添加到数据库，所以输入的类型不再是简单类型，而是pojo对象
        插入数据的时候不返回任何值，所以不用配置输出结果类型,
        VALUE(#{username},#{birthday},#{sex},#{address}):里面的参数和User.java里面的属性相同
    -->
    <insert id="insertUser" parameterType="com.sunyanxiong.mybatis.User">

        /* 自增主键id 的返回
          keyProperty:主键对应的 pojo 对象的属性,将查询到的 preparedStatement 设置到插入的那个对象中
          resultType:查找后返回的结果类型
          order:表示在执行插入数据之后来将插入的主键 id 值获取
        */
        <selectKey keyProperty="id" resultType="int" order="AFTER">
            SELECT last_insert_id()
        </selectKey>

        INSERT INTO user(username,birthday,sex,address) VALUE(#{username},#{birthday},#{sex},#{address});
    </insert>

    <!-- 删除用户信息 -->
    <delete id="deleteUserById" parameterType="int">
        delete from user where id = #{id}
    </delete>


    <!-- 更新用户信息
        将要修改的对象作为输入类型传入
        id = #{id}:指的是将传入的对象中的id属性值
    -->
    <update id="updateUserById" parameterType="com.sunyanxiong.mybatis.User">
        update user set username = #{username},birthday = #{birthday},sex = #{sex},address = #{address}
        where id = #{id}
    </update>

</mapper>