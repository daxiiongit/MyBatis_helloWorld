MyBatis 入门程序：
一、清楚原生态的jdbc的开发和一些常见的问题：
    1.创建数据库连接对象：Connection connection = null;
    2.创建预编译对象：PreparedStatement preparedStatement = null;
    3.创建结果集：ResultSet rs = null;
    4.加载数据库驱动：Class.forName("com.mysql.jdbc.Driver");
    5.通过数据库驱动获取数据库连接：connection =  DriverManager.getConnection("jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8", "root", "sunyanxiong");
    6.创建 sql 语句：String sql = "select * from user where username = ?";
    7.获取预编译对象：preparedStatement = connection.prepareStatement(sql);
    8.设置参数：preparedStatement.setString(1, "王五");
    9.发送 sql 并返回结果集：resultSet =  preparedStatement.executeQuery();
    10.遍历结果集：while(resultSet.next()){
             				System.out.println(resultSet.getString("id")+"  "+resultSet.getString("username"));
             			}
    11.释放资源(倒着释放)：resultSet.close();preparedStatement.close();onnection.close();


二、项目需求：
    1.根据 id 查找用户信息；
    (1).步骤：
        (1).1.加入数据库驱动、Junit测试环境、MyBatis 相应的jar包；
        (1).2.配置 日志管理文件：log4j.properties
        (1).3.在SqlMapConfig.xml 中配置数据库连接信息
        (1).4.创建数据库表
        (1).5.创建po类:User.java
        (1).6.配置相应的映射文件： User.xml(iBatis这么写),书写sql语句
        (1).7.在SqlMapConfig.xml 中加载映射文件User.xml
        (1).8.编写测试程序：UserTest.java类，使用Junit测试

    2.根据用户名来查找用户信息；
    (1).步骤：
        (1).1.配置映射文件，User.xml
        (1).2.书写测试代码

    3.添加用户信息
    (1)步骤：
        (1).1.配置映射文件,User.xml
        (1).2.测试代码
    (2)自增主键 id 的返回：
        (2).1.修改映射文件 User.xml 文件，使用 MySql 的 LAST_INSERT_ID() 函数来将 id 获取
        (2).2.使用对象.getId()方法获取插入的id
    (3)非自增主键 id 的返回：
            (2).1.修改映射文件 User.xml 文件，使用 MySql 的 UUID() 函数来将 id 获取
            (2).2.使用对象.getId()方法获取插入的id
    4.删除用户信息
        (1)配置映射文件 User.xml
        (2)代码测试
    5.更新用户信息（注意：在更新用户信息的时候一定要设置用户id值）
        (1)配置映射文件 User.xml
        (2)代码测试
        (3)注意：其他没有设置的数默认为空？？？

三、原始 dao 和 daoImpl 的开发
    1.创建 dao 接口，daoImpl 实现类
    2.SqlSessionFactory 只需要创建一次，就可以在整个应用程序中使用，使用的是单列模式，这里使用构造器来将 SqlSessionFactory 注入到相应的实现类中
    3.SqlSession 不是不是线程安全的，所以需要将 SqlSession 放到方法块中，方法块对应的内存的堆中，不会相互影响

四、使用 mapper 代理对象的方式开发 mapper 接口 (相当于 dao 接口),不需要写实现类，mapper 代理对象会帮我们自动实现

mapper规范：
    第一：映射文件中的 namespace = pojo 接口中的权限类名；例如：namespace = "com.sunyanxiong.mapper.UserMapper.java"
    第二：映射文件中的 statement的 id = pojo 接口中的抽象方法名
    第三：映射文件中的 statement的 parameterType = pojo 接口中的抽象方法的参数名
    第四：映射文件中的 statement的 resultType = pojo 接口中的抽象方法的返回值

    注意：在映射文件中只有一个 parameterType 和 一个 resultType ,所以，在mapper接口中只能定义一个参数。
         在查找信息的时候需要返回pojo对象，用于封装查找的信息，不需要提交事务，但是记得关闭回话
         在更新、删除、新增数据的时候不需要返回数据，但是需要提交事务，也是要记得关闭回话


    1.创建 UserMapper.xml文件,类似User.xml
    2.创建 UserMapper.java 接口，类似 UserDao.java
    3.将映射文件 UserMapper.xml 加入到 SqlMapConfig.xml中
    4.写测试代码

五、SqlMapConfig.xml 配置文件常用
    1. properties: 专门用于加载属性文件方便对属性配置文件统一管理，避免硬编码。
        添加数据库连接属性配置文件:db.properties 文件，在SqlMapConfig.xml 中引用即可

    2.settings:全局配置，不能乱配置
    3.typeAliases:映射文件引用类型的别名配置
    4.mappers:配置映射文件加载(重点)
        使用接口的方式来加载单个映射文件:需要设置映射类和映射配置文件名字相同，而且满足mapper代理的规范，并且放在同一个包中，则可以直接写映射类型

六、输入映射
    操作时输入参数可能为简单类型，hashMap，List，pojo，pojo包装类型
    1.输入类型为pojo包装类型(用户信息综合查询)
        1.1创建 User 的扩展类 和 包装类
        1.2在映射文件中创建 用户信息综合查询的接口
        1.3在映射配置文件中配置相应的sql语句，这里注意要使用对象.属性的方式来获取相应的值
        1.4测试代码，需要构建包装的pojo对象


七、输出映射
    1.输出类型为 简单类型，如计算综合查询列表的总数，用户实现分页
        1.1在映射文件中配置 statement
        1.2在mapper代理类中定义接口
        1.3测试代码

八、resultMap 的使用
    1.定义resultMap
        1.1在映射文件中定义，使用标签
    2.使用resultMap




三、问题：
    1.找不到配置文件的错误：java.io.IOException: Could not find resource /config/SqlMapConfig.xml
    解决方案：将配置文件都加到src目录面，直接写配置文件的名字即可。
    2.模糊查询中简单类型只能使用${value},不能使用其他参数，如果使用会报错：
    org.apache.ibatis.exceptions.PersistenceException:
    ### Error querying database.  Cause: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'username' in 'class java.lang.String'
    ### Cause: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'username' in 'class java.lang.String'
    3.数据库连接错误：
    Cause: java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
    解决方案：修改数据库连接密码
    4.别名写错：
    Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'user5'.
    5.扫描映射接口包时，扫描错误：
    org.apache.ibatis.binding.BindingException: Type interface com.sunyanxiong.mapper.UserMapper is not known to the MapperRegistry.

    6.不能找到类
    Caused by: org.apache.ibatis.builder.BuilderException: Error parsing SQL Mapper Configuration. Cause: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'userResultMap'.  Cause: java.lang.ClassNotFoundException: Cannot find class: userResultMap
    解决方案，使用的时候要使用 resultMap属性

    7.sql语句拼接错误,在标签中注释尽量使用 <!----> ，不要使用其他的，避免会将注解当作代码执行
    Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'AND user.sex = '1' AND user.username L' at line 7

四、总结：
    1.查看当前项目的目录：System.out.println(System.getProperty("user.dir"));
    2.提交代码到github：
        步骤：
        (1)点击 VCS -> Import into Version Control -> Great Git Repository
        (2)点击项目右键 -> Git -> +Add
        (3)点击项目右键 -> Git -> Commit
        (4)点击项目右键 -> Git -> Push


